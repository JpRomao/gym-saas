// Academia (1) --- (N) Funcion√°rio
// Academia (N) --- (N) Aluno
// Academia (1) --- (N) CheckinPremium
// Aluno (1) --- (N) EntradaSaida
// Aluno (1) --- (N) Pagamento
// Aluno (1) --- (N) Fatura
// Funcionario (1) --- (N) PermissaoEntrada
// Aluno (1) --- (N) PermissaoEntrada
// Plano (1) --- (N) Aluno
// Aluno (1) --- (N) CheckinPremium

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  OWNER
  MANAGER
  WORKER
  RELATIONED
}

model Gym {
  id            String    @id @default(cuid())
  name          String
  phone         String
  email         String
  cnpj          String    @unique
  lastPayment   DateTime? @map("last_payment")
  premiumEndsAt DateTime? @map("premium_ends_at")

  employees Employee[]
  Student   Student[]
  Plan      Plan[]

  @@map("gyms")
}

model Employee {
  id       String   @id @default(cuid())
  name     String
  phone    String
  cpf      String   @unique
  email    String   @unique
  password String
  gymId    String   @map("gym_id")
  role     UserRole @default(WORKER)
  address  String

  gym Gym @relation(fields: [gymId], references: [id])

  @@map("employees")
}

model Student {
  id                            String    @id @default(cuid())
  name                          String
  email                         String    @unique
  phone                         String
  cpf                           String
  gender                        String?
  address                       String
  planId                        String    @map("plan_id")
  gymId                         String    @map("gym_id")
  birthday                      DateTime
  hasMedicalRestriction         Boolean   @map("has_medical_restriction")
  medicalRestrictionDescription String?   @map("medical_restriction_description")
  weight                        Int?
  height                        Int?
  lastPaymentDate               DateTime? @map("last_payment_date")

  Gym Gym @relation(fields: [gymId], references: [id])

  @@map("students")
}

model Plan {
  id       String @id @default(cuid())
  name     String
  price    Int
  duration Int
  discount Float? @default(0)
  gymId    String @map("gym_id")

  gym Gym @relation(fields: [gymId], references: [id])

  @@map("plans")
}

model Admin {
  id       String @id @default(cuid())
  name     String
  email    String @unique
  password String

  @@map("admins")
}
